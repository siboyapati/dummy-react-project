{"version":3,"sources":["../src/index.js"],"names":["app","use","express","json","urlencoded","extended","passport","initialize","require","isProduction","process","env","NODE_ENV","dbConnection","MONGO_URI_PROD","MONGO_URI_DEV","mongoose","connect","useNewUrlParser","useCreateIndex","useUnifiedTopology","useFindAndModify","then","console","log","catch","err","routes","static","__dirname","get","req","res","sendFile","port","PORT","listen","httpsOptions","key","cert","server","https","createServer"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAEA;;AACA;;;;AAEA,MAAMA,GAAG,GAAG,uBAAZ,C,CAEA;;AACAA,GAAG,CAACC,GAAJ,CAAQC,iBAAQC,IAAR,EAAR;AACAH,GAAG,CAACC,GAAJ,CAAQC,iBAAQE,UAAR,CAAmB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAnB,CAAR;AAEAL,GAAG,CAACC,GAAJ,CAAQK,kBAASC,UAAT,EAAR;;AACAC,OAAO,CAAC,wBAAD,CAAP;;AACAA,OAAO,CAAC,6BAAD,CAAP;;AACAA,OAAO,CAAC,2BAAD,CAAP;;AACAA,OAAO,CAAC,0BAAD,CAAP;;AAEA,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA9C,C,CAEA;;AACA,MAAMC,YAAY,GAAGJ,YAAY,GAAGC,OAAO,CAACC,GAAR,CAAYG,cAAf,GAAgCJ,OAAO,CAACC,GAAR,CAAYI,aAA7E,C,CAEA;;AACAC,kBACGC,OADH,CACWJ,YADX,EACyB;AACrBK,EAAAA,eAAe,EAAE,IADI;AAErBC,EAAAA,cAAc,EAAE,IAFK;AAGrBC,EAAAA,kBAAkB,EAAE,IAHC;AAIrBC,EAAAA,gBAAgB,EAAE;AAJG,CADzB,EAOGC,IAPH,CAOQ,MAAM;AACVC,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA;AACD,CAVH,EAWGC,KAXH,CAWUC,GAAD,IAASH,OAAO,CAACC,GAAR,CAAYE,GAAZ,CAXlB,E,CAaA;;;AACA1B,GAAG,CAACC,GAAJ,CAAQ,GAAR,EAAa0B,eAAb;AACA3B,GAAG,CAACC,GAAJ,CAAQ,SAAR,EAAmBC,iBAAQ0B,MAAR,CAAe,gBAAKC,SAAL,EAAgB,WAAhB,CAAf,CAAnB,E,CAEA;;AACA,IAAIpB,YAAJ,EAAkB;AAChB;AACAT,EAAAA,GAAG,CAACC,GAAJ,CAAQC,iBAAQ0B,MAAR,CAAe,gBAAKC,SAAL,EAAgB,oBAAhB,CAAf,CAAR;AAEA7B,EAAAA,GAAG,CAAC8B,GAAJ,CAAQ,GAAR,EAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACzBA,IAAAA,GAAG,CAACC,QAAJ,CAAa,mBAAQJ,SAAR,EAAmB,OAAnB,EAA4B,QAA5B,EAAsC,OAAtC,EAA+C,YAA/C,CAAb,EADyB,CACmD;AAC7E,GAFD;AAIA,QAAMK,IAAI,GAAGxB,OAAO,CAACC,GAAR,CAAYwB,IAAZ,IAAoB,EAAjC;AACAnC,EAAAA,GAAG,CAACoC,MAAJ,CAAWF,IAAX,EAAiB,MAAMX,OAAO,CAACC,GAAR,CAAa,0BAAyBU,IAAK,EAA3C,CAAvB;AACD,CAVD,MAUO;AACL,QAAMA,IAAI,GAAGxB,OAAO,CAACC,GAAR,CAAYwB,IAAZ,IAAoB,IAAjC;AAEA,QAAME,YAAY,GAAG;AACnBC,IAAAA,GAAG,EAAE,sBAAa,mBAAQT,SAAR,EAAmB,sBAAnB,CAAb,CADc;AAEnBU,IAAAA,IAAI,EAAE,sBAAa,mBAAQV,SAAR,EAAmB,sBAAnB,CAAb;AAFa,GAArB;;AAKA,QAAMW,MAAM,GAAGC,eAAMC,YAAN,CAAmBL,YAAnB,EAAiCrC,GAAjC,EAAsCoC,MAAtC,CAA6CF,IAA7C,EAAmD,MAAM;AACtEX,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAA6BU,IAAzC,EADsE,CAEtE;AACD,GAHc,CAAf;AAID","sourcesContent":["import 'dotenv/config';\nimport express from 'express';\nimport mongoose from 'mongoose';\nimport https from 'https';\nimport { readFileSync } from 'fs';\nimport { resolve, join } from 'path';\nimport passport from 'passport';\nimport all_routes from 'express-list-endpoints';\n\nimport routes from './routes';\nimport { seedDb } from './utils/seed';\n\nconst app = express();\n\n// Bodyparser Middleware\napp.use(express.json());\napp.use(express.urlencoded({ extended: true }));\n\napp.use(passport.initialize());\nrequire('./services/jwtStrategy');\nrequire('./services/facebookStrategy');\nrequire('./services/googleStrategy');\nrequire('./services/localStrategy');\n\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// DB Config\nconst dbConnection = isProduction ? process.env.MONGO_URI_PROD : process.env.MONGO_URI_DEV;\n\n// Connect to Mongo\nmongoose\n  .connect(dbConnection, {\n    useNewUrlParser: true,\n    useCreateIndex: true,\n    useUnifiedTopology: true,\n    useFindAndModify: false,\n  })\n  .then(() => {\n    console.log('MongoDB Connected...');\n    seedDb();\n  })\n  .catch((err) => console.log(err));\n\n// Use Routes\napp.use('/', routes);\napp.use('/public', express.static(join(__dirname, '../public')));\n\n// Serve static assets if in production\nif (isProduction) {\n  // Set static folder\n  app.use(express.static(join(__dirname, '../../client/build')));\n\n  app.get('*', (req, res) => {\n    res.sendFile(resolve(__dirname, '../..', 'client', 'build', 'index.html')); // index is in /server/src so 2 folders up\n  });\n\n  const port = process.env.PORT || 80;\n  app.listen(port, () => console.log(`Server started on port ${port}`));\n} else {\n  const port = process.env.PORT || 5000;\n\n  const httpsOptions = {\n    key: readFileSync(resolve(__dirname, '../security/cert.key')),\n    cert: readFileSync(resolve(__dirname, '../security/cert.pem')),\n  };\n\n  const server = https.createServer(httpsOptions, app).listen(port, () => {\n    console.log('https server running at ' + port);\n    // console.log(all_routes(app));\n  });\n}\n"],"file":"index.js"}